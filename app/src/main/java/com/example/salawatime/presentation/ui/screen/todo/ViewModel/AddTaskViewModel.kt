package com.example.salawatime.presentation.ui.screen.todo.ViewModelimport androidx.compose.runtime.MutableStateimport androidx.compose.runtime.mutableStateOfimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.salawatime.data.todo.Taskimport com.example.salawatime.data.todo.repo.Repositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass AddTaskViewModel @Inject constructor(private val repository: Repository) : ViewModel() {    fun addTask(task: Task){        viewModelScope.launch(Dispatchers.IO){            repository.addTask(task)        }    } fun updateTask(task: Task){        viewModelScope.launch(Dispatchers.IO){            repository.updateTask(task)        }    }    val title: MutableState<String> = mutableStateOf("")    val description: MutableState<String> = mutableStateOf("")    fun validateFields(): Boolean {        return title.value.isNotEmpty() && description.value.isNotEmpty()    }}